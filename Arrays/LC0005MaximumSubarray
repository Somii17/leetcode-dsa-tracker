// ✅ Problem: https://leetcode.com/problems/maximum-subarray/
// 💡 Approach: Kadane’s Algorithm – track max subarray sum by maintaining a running total.
// ⏱️ Time: O(n), Space: O(1)
import java.lang.Math;
class Solution {
    public int maxSubArray(int[] nums) {
        int sum = 0;
        int ans = Integer.MIN_VALUE;
        for(int i=0; i<nums.length;i++){
            if(sum>=0){
                sum=sum+nums[i];
            }
            else{
                sum=nums[i];
            }
            ans=Math.max(ans,sum);
        }
        return ans;
    }
}
